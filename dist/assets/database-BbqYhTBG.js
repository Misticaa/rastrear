import{i as c,s as l}from"./supabase-DKG8Teh-.js";class i{static formatCPF(t){const a=t.replace(/[^\d]/g,"");return a.length<=11?a.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/,"$1.$2.$3-$4"):t}static cleanCPF(t){return t.replace(/[^\d]/g,"")}static isValidCPF(t){const a=this.cleanCPF(t);return a.length!==11||/^(\d)\1{10}$/.test(a)?!1:this.validateCPFDigits(a)}static validateCPFDigits(t){let a=0;for(let o=0;o<9;o++)a+=parseInt(t.charAt(o))*(10-o);let e=11-a%11;if((e>=10?0:e)!==parseInt(t.charAt(9)))return!1;a=0;for(let o=0;o<10;o++)a+=parseInt(t.charAt(o))*(11-o);return e=11-a%11,(e>=10?0:e)===parseInt(t.charAt(10))}static applyCPFMask(t){let a=t.value.replace(/[^\d]/g,"");return a.length>11&&(a=a.slice(0,11)),a.length>9?a=a.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/,"$1.$2.$3-$4"):a.length>6?a=a.replace(/(\d{3})(\d{3})(\d{3})/,"$1.$2.$3"):a.length>3&&(a=a.replace(/(\d{3})(\d{3})/,"$1.$2")),t.value=a,a}}class u{constructor(){this.isConfigured=c(),this.isConfigured||console.warn("⚠️ Supabase não configurado. Usando armazenamento local como fallback.")}async createLead(t){if(!this.isConfigured)return this.createLeadFallback(t);try{const a={...t,initial_timestamp:t.initial_timestamp||new Date().toISOString(),liberation_paid:!1,delivery_attempts:0,liberation_date:null},{data:e,error:r}=await l.from("leads").insert([a]).select().single();return r?(console.error("Erro ao criar lead:",r),this.createLeadFallback(a)):(console.log("✅ Lead criado no Supabase:",e),{success:!0,data:e})}catch(a){return console.error("Erro na criação do lead:",a),this.createLeadFallback(leadWithTimestamp)}}async getLeadByCPF(t){if(!this.isConfigured)return this.getLeadByCPFFallback(t);try{const{data:a,error:e}=await l.from("leads").select("*").eq("cpf",t.replace(/[^\d]/g,"")).single();return e&&e.code!=="PGRST116"?(console.error("Erro ao buscar lead:",e),this.getLeadByCPFFallback(t)):{success:!0,data:a||null}}catch(a){return console.error("Erro na busca do lead:",a),this.getLeadByCPFFallback(t)}}async updateLeadStage(t,a){if(!this.isConfigured)return this.updateLeadStageFallback(t,a);try{const{data:e,error:r}=await l.from("leads").update({etapa_atual:a}).eq("cpf",t.replace(/[^\d]/g,"")).select().single();return r?(console.error("Erro ao atualizar etapa:",r),this.updateLeadStageFallback(t,a)):(console.log("✅ Etapa atualizada no Supabase:",e),{success:!0,data:e})}catch(e){return console.error("Erro na atualização da etapa:",e),this.updateLeadStageFallback(t,a)}}async updatePaymentStatus(t,a){if(!this.isConfigured)return this.updatePaymentStatusFallback(t,a);try{const{data:e,error:r}=await l.from("leads").update({status_pagamento:a}).eq("cpf",t.replace(/[^\d]/g,"")).select().single();return r?(console.error("Erro ao atualizar status de pagamento:",r),this.updatePaymentStatusFallback(t,a)):(console.log("✅ Status de pagamento atualizado no Supabase:",e),{success:!0,data:e})}catch(e){return console.error("Erro na atualização do status de pagamento:",e),this.updatePaymentStatusFallback(t,a)}}async updateLeadTimeline(t,a){if(!this.isConfigured)return this.updateLeadTimelineFallback(t,a);try{const{data:e,error:r}=await l.from("leads").update({timeline_data:a,updated_at:new Date().toISOString()}).eq("cpf",t.replace(/[^\d]/g,"")).select().single();return r?(console.error("Erro ao atualizar timeline:",r),this.updateLeadTimelineFallback(t,a)):(console.log("✅ Timeline atualizada no Supabase:",e),{success:!0,data:e})}catch(e){return console.error("Erro na atualização da timeline:",e),this.updateLeadTimelineFallback(t,a)}}createLeadFallback(t){try{const a=JSON.parse(localStorage.getItem("leads")||"[]"),e={...t,id:Date.now().toString(),created_at:new Date().toISOString(),updated_at:new Date().toISOString(),initial_timestamp:t.initial_timestamp||new Date().toISOString()};return a.push(e),localStorage.setItem("leads",JSON.stringify(a)),console.log("✅ Lead criado no localStorage:",e),{success:!0,data:e}}catch(a){return console.error("Erro no fallback de criação:",a),{success:!1,error:a.message}}}getLeadByCPFFallback(t){try{return{success:!0,data:JSON.parse(localStorage.getItem("leads")||"[]").find(r=>r.cpf===t.replace(/[^\d]/g,""))||null}}catch(a){return console.error("Erro no fallback de busca:",a),{success:!1,error:a.message}}}updateLeadStageFallback(t,a){try{const e=JSON.parse(localStorage.getItem("leads")||"[]"),r=e.findIndex(s=>s.cpf===t.replace(/[^\d]/g,""));return r!==-1?(e[r].etapa_atual=a,e[r].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(e)),console.log("✅ Etapa atualizada no localStorage:",e[r]),{success:!0,data:e[r]}):{success:!1,error:"Lead não encontrado"}}catch(e){return console.error("Erro no fallback de atualização:",e),{success:!1,error:e.message}}}updatePaymentStatusFallback(t,a){try{const e=JSON.parse(localStorage.getItem("leads")||"[]"),r=e.findIndex(s=>s.cpf===t.replace(/[^\d]/g,""));return r!==-1?(e[r].status_pagamento=a,e[r].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(e)),console.log("✅ Status de pagamento atualizado no localStorage:",e[r]),{success:!0,data:e[r]}):{success:!1,error:"Lead não encontrado"}}catch(e){return console.error("Erro no fallback de atualização de pagamento:",e),{success:!1,error:e.message}}}updateLeadTimelineFallback(t,a){try{const e=JSON.parse(localStorage.getItem("leads")||"[]"),r=e.findIndex(s=>s.cpf===t.replace(/[^\d]/g,""));return r!==-1?(e[r].timeline_data=a,e[r].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(e)),console.log("✅ Timeline atualizada no localStorage:",e[r]),{success:!0,data:e[r]}):{success:!1,error:"Lead não encontrado"}}catch(e){return console.error("Erro no fallback de atualização de timeline:",e),{success:!1,error:e.message}}}updateLiberationStatusFallback(t,a,e){try{const r=JSON.parse(localStorage.getItem("leads")||"[]"),s=r.findIndex(o=>o.cpf===t.replace(/[^\d]/g,""));return s!==-1?(r[s].liberation_paid=a,r[s].liberation_date=e||new Date().toISOString(),r[s].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(r)),console.log("✅ Status de liberação atualizado no localStorage:",r[s]),{success:!0,data:r[s]}):{success:!1,error:"Lead não encontrado"}}catch(r){return console.error("Erro no fallback de atualização de liberação:",r),{success:!1,error:r.message}}}updateDeliveryAttemptsFallback(t,a){try{const e=JSON.parse(localStorage.getItem("leads")||"[]"),r=e.findIndex(s=>s.cpf===t.replace(/[^\d]/g,""));return r!==-1?(e[r].delivery_attempts=a,e[r].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(e)),console.log("✅ Tentativas de entrega atualizadas no localStorage:",e[r]),{success:!0,data:e[r]}):{success:!1,error:"Lead não encontrado"}}catch(e){return console.error("Erro no fallback de atualização de tentativas:",e),{success:!1,error:e.message}}}}export{i as C,u as D};
